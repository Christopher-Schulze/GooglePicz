name: CI

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - uses: ./.github/actions/checks

  bench-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run cache benchmarks
        run: cargo bench -p cache

  packaging-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run packaging tests
        run: cargo test -p packaging
      - name: Run CI checks
        run: cargo run --package packaging --bin ci_checks
      - name: Install screenshot tools
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y imagemagick xvfb
      - name: Generate UI screenshots
        if: runner.os == 'Linux'
        run: ./tests/e2e/generate_screenshots.sh
      - name: Upload screenshots
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ui-screenshots
          path: docs/screenshots
      - name: Upload checksums
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checksums-${{ runner.os }}
          path: checksums.txt

  build-installers:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            format: deb
          - os: ubuntu-latest
            format: rpm
          - os: ubuntu-latest
            format: appimage
          - os: macos-latest
            format: dmg
          - os: windows-latest
            format: nsis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo install cargo-deb
          cargo install cargo-rpm
          sudo apt-get update
          sudo apt-get install -y appimagetool

      - name: Install cargo-bundle
        if: matrix.os == 'macos-latest'
        run: cargo install cargo-bundle

      - name: Install NSIS
        if: matrix.os == 'windows-latest'
        run: choco install nsis -y

      - name: Build installer
        run: cargo run --package packaging --bin packager
        env:
          LINUX_PACKAGE_FORMAT: ${{ matrix.format }}

      - name: Verify artifacts
        run: cargo run --package packaging --bin ci_checks

      - name: Upload Linux artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: googlepicz-linux-${{ matrix.format }}
          path: GooglePicz-*.*

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: googlepicz-macos
          path: target/release/GooglePicz-*.dmg

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: googlepicz-windows
          path: target/windows/GooglePicz-*-Setup.exe
